var path = require('path');
var extractTextPlugin = require('extract-text-webpack-plugin');
var webpack = require("webpack");
var timestampWebpackPlugin = require("timestamp-webpack-plugin");

module.exports = {

    context: path.resolve('src'),

    entry: ["./app.js","webpack-hot-middleware/client?path=/__webpack_hmr&timeout=20000&reload=true"],

    output: {
        path: path.resolve('build'),
        publicPath: "/build/",
        filename: "./js/bundle.js",
    },

    devServer: {
        contentBase: "src/views",
        hot: true
    },

    plugins: [
        new extractTextPlugin({ // define where to save the file
      filename: './css/style.css',
      allChunks: true,
    }),
        new webpack.ProvidePlugin({
            $: "jquery",
            Jquery: "jquery",
            "window.Jquery": "jquery"
        }),
        new timestampWebpackPlugin({
            path: __dirname,
            filename: "timestamp.json"
        }),
        new webpack.BannerPlugin("Generated by W,ebpack Banner Plugin"),
        new webpack.HotModuleReplacementPlugin()

    ],

    module: {
        rules: [
            {
                test: /\.(js|jsx|es6)$/,
                exclude: /node_modules/,
                loader: 'babel-loader'
            },
            {
                test: /\.css$/,
                exclude: /node_modules/,
                loader: extractTextPlugin.extract({
                    fallbackLoader: 'style-loader',
                    loader: 'css-loader!autoprefixer-loader'
                })
            },
            {
                test: /\.scss$/,
                exclude: /node_modules/,
                loader: extractTextPlugin.extract({
                    fallbackLoader: 'style-loader',
                    loader: 'css-loader!autoprefixer-loader!sass-loader'
                })
            },
            {
                test: /\.(png|jpg)$/,
                exclude: /node_modules/,
                loader: 'url-loader?limit=1000'
            },
            {
                test: /\.json$/,
                exclude: /node_modules/,
                loader: 'json-loader!' + path.resolve('customloader/stripjsoncomments')
            }
        ],
        /*rules: [
            {
                test: /\.js$/,
                exclude: /node_modules/,
                loader: "jshint-loader"
            }
        ]*/
    },

    resolve: {
        extensions: ['.js', '.es6', '.jsx', '.css']
    }

    //devtool: "source-map"
    //watch : true
}